~#CATS MACRO SKIM.TRANSIT
~#syntax: skim.transit <3 digit id> <global iteration 0-2> <python path>
~# kww 11/01
~# revised kww 3/02 to add more coefficients to generalized parking cost
~# revised ceb 7/08 to differentiate between brt with ttf=2 and regular time ttf=1
~# revised Heither, 10/14/10: optional second argument ("python") added to perform
~#            matrix convolutions through python script called by transit_skim.bat
~#            rather than in Emme. If 2nd argument not used, normal convolution used. 
~#
~# revised Heither, 06/12/2013: new transit auxiliary mode k (People Mover) added
~# revised Heither, 02-19-2016: all wait times calculated using full headways (no caps)
~#
~# revised Bozic, 11-1-2017: loops through peak and offpeak transit scenarios
~#                           for each global iteration to integrate assignment and
~#                           removes emme matrix convolution portion because we always
~#                           use python - also calls the python macros to do the indexing
~#                           and also the final matrix manipulations
~#
~# revised Heither, 10-11-2018: store maximum internal zone number in z-register; store
~#                              Park & Ride Group in mo602 & partition gr (start line 449)
~#                              to speed up triple-indexing calculations.
~# revised Heither, 10-12-2020: update base fares as part of trip-based model update; separate CTA rail
~#                              fare added; transfer discount now applies to CTA Rail-CTA Rail
~# revised Heither, 09-11-2021: minor adjustments to not disturb pre-loaded congested times for Iteration 0
~#
~# revised Heither, 10-29-2021: wait time weight & auxiliary time weight revised to 2.00 for consistency with
~#                              Mode-Dest-TOD\cmap_modedest\fast\transit\approach.py
~#
~# revised Heither, 05-06-2022: added fare for Pace express service; adjust matrix convolution logic to 
~#                              include all CTA rail & Metra stations and Pace parking lots; adjust kzone matrix (mfx21): 
~#                              use origin zone if zone pair is accessible using transit or intrazonal, else use kzone;
~#                              corrected final average fare calculation
~#===========================================================================================================================
~#This macro combines three previously separate procedures into one macro.
~#
~# 1. guess.which.mode
~# 2. skim.time.fare.distance
~# 3. index.autoaccess.parking
~# 
~#The procedures have been combined to streamline production runs, and
~# (more importantly) to ensure that uniform cost parameters are used 
~# throughout.
~#
~#The following data elements must be present before executing this macro:
~#  1. transit network to be analyzed must be scenario 4 in the current databank
~#      w/ these extra attributes present.
~#	  @ltime  = scheduled line haul time
~#	  @hwytm   = COPIED IN REAL TIME FROM Period 3 AND Period 5 
~#                 (congested highway time from a complementary highway asmt may be pre-loaded).
~#    @zfare  = incremental transit zone fare
~#	  @pspac  = number of off-street parking spaces at station node
~#	  @pcost  = daily fee for off street parking at station node
~#
~#======================================================================
~# SECTION 1: SKIM TIME, DISTANCE AND FARES ON THE TRANSIT NETWORK
~#   (ORIGINALLY CATS EMME/2 MACRO skim.times.dist.fare, kww, 8/01)
~#    originally written to replace MVS MSTPATH, kww 2/98
~# 
~#
~#PRODUCE INPUTS TO CATS COST AND MODE CHOICE
~#WALK ACCESS TRANSIT NETWORK SKIMMING
~#	1. CALCULATE NETWORK GENERALIZED COSTS
~#	2. SKIM WALK ACCESS GENERALIZED COST
~#	3. SKIM TRANSIT FARES
~#AUTO ACCESS TO TRANSIT NETWORK ANALYSIS
~#	1. CONVOLUTE GENERALIZED HIGHWAY AND TRANSIT COSTS
~#	2. EXTRACT SKIMMED LEGS
~#	3. EVALUATED VALIDITY OF AUTO ACCESS CALCULATION
~#
~#===================================================
~/ 0. INITIALIZE PARAMETERS
~#===================================================
~#
~o|39
~z=%0%
~+;~?z=0;~$>error
~#
~z=3632    ~/ maximum internal zones (re-use z since passed error check)
~#
~+;s=%1%;~?e;~$>bad_scen
~/ Transit scenario argument is valid.
~#
~# ## -- x is the global iteration 0-2: auto times will lag 1 global iteration
~# ## -- Iteration 0 will use pre-loaded congested times.
~x=%2%
~+;~?x>0;~x-1
~r17=%1%
~r21=%2%
~#
~t1=report\iter_%2%\transit_skim.all.rpt
~!if exist %t1% (del %t1%)
reports=%t1%
~:period_loop
~y+1
~#SET SCENARIO
s=%r17%
~#check for peak or offpeak scenario and set matrix series 800 or 900 and 
~#scenario 3 or 5 as the source scenario to copy from
~# y=1 is peak, y=2 is offpeak
~?y=1
~+;~r19=8;~r20=3;~t3=mf44;~t4=mf45
~?y=2
~+;~r19=9;~r20=5;~t3=mf46;~t4=mf47
~#
~# FILL IN @HWYTM
~# use ul2 temporarily to store congested highway time from auto scenario
~# @hwytm segment attribute was created when the transit network was built
~# ## -- For Iteration 0: @hwytm has already been filled with pre-loaded congested times. 
~+;~?r21=0;~$>no_update
2.41
~+; 1; y; @hwytm;n; 0; ; *;*; 4
~+; 1; y; ul2; 0; ; *; 4
~+; 2; %1%%x%%r20%; timau; ul2; *
~+;1;y;@hwytm;n;ul2;;*;*;4
~+; 1; y; ul2; 0; ; *; 4; q
~:no_update
~#
~#
~#SET BASE FARES 
~# ## 10/2020 - these fares reflect average base transit fares calculated from actual usage of cash/Ventra/single rides/passes. 
~r1= 151         / CTA BUS
~r100= 170       / CTA RAIL
~r2= 158         / PACE
~r3= 336         / METRA
~r101=450        / Pace premium service
~r4= -132	     / CTA BUS TRANSFER DISCOUNT (will be applied to all CTA Bus-CTA Rail-Pace transfers) - not quite right for Pace premium but reasonable
~#
~#SET COST COEFFICIENTS (should correspond to MC model (or explain why not).
~#
~r5=2.00        / WAIT TIME WEIGHT
~r6=2.00        / AUXILIARY TRANSIT TIME WEIGHT
~r7=0.01        / BOARDING PENALTY WEIGHT APPLIED TO FARE (low because it's applied to gross fare).
~#
~r8=2.00          / AUTO TIME OPERATING COSTS PER MINUTE
~r9=1.00          / AUTO DISTANCE OPERATING COSTS PER MILE
~r10=2.00         / AUTO TRIP FIXED COSTS
~#
~r11=-1.00	  / OFF-STREET PARKING AVAILABILITY WEIGHT
~r12= 1.00	  / OFF-STREET PARKING FEE WEIGHT
~r13=-1.00	  / ON-STREET PARKING AVAILABILITY WEIGHT
~r14= 1.00	  / ON-STREET PARKING FEE WEIGHT
~r15=-20.00       / GENERALIZED PARKING COST COEFFICIENT
~r16= 75          / DAILY PARKING FEE OFFSET (in cents) 
~#			(i.e. the cost at which parking may as well be free).
~#
~#
~#INITIALIZE MATRICES using matrix calculator to write over matrices for each iteration
3.21
~+; 1;y; mf%r19%03;y; fmode; skimmed first mode %r17%;~?q=1;y;0;3;;;n;1;
~+; 1;y; mf%r19%04;y; pmode; skimmed priority mode %r17%;~?q=1;y;0;3;;;n;1;
~+; 1;y; mf%r19%05;y; lmode; skimmed last mode %r17%;~?q=1;y;0;3;;;n;1;
~+; 1;y; mf%r19%06;y; one; dummy for assignment (ones) %r17%;~?q=1;y;0;1;;;n;1;
~+; 1;y; mf%r19%07;y; skimgc; skimmed generalized cost %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%08;y; skimiveh; skimmed in-vehicle minutes %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%09;y; skimxfer; skimmed transfer link minutes %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%10;y; skmtwait; skimmed total wait minutes %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%11;y; skmfwait; skimmed first wait minutes %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%12;y; skmifare; skimmed initial fares %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%13;y; skimmi; skimmed distance %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%15;y; zonefare; zonal fares %r17% ;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%16;y; xferdisc; xfer link fare discount %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%17;y; xferbrd; xfer node boarding tally %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%18;y; skimfare; skimmed final average fare %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%19;y; hwygc; congested hwy generalized cost %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%20;y; trngc; indexed tran generalized cost %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%21;y; zone; indexed zone number %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mf%r19%34;y; ratio; indexed transit/auto only %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mo%r19%01;y; spacesof; off-str prkng daily spaces %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mo%r19%02;y; centsof; off-str prkng daily cents %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mo%r19%03;y; spaceson; on-str prkng daily spaces %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mo%r19%04;y; centson; on-str prkng daily cents %r17%;~?q=1;y;0;0;;;n;1;
~+; 1;y; mo%r19%05;y; parkgc; generalized parking cost %r17%;~?q=1;y;0;99999;;;n;1;q
~#
~#
~#=========================================================
~/	1. CALCULATE NETWORK GENERALIZED COSTS
~#=========================================================
~#SET TRANSIT TIME FUNCTION (ft1=normal  and ft2=brt)
4.12
~#first delete existing functions
~+; 4; ft1,ft2; ; y
~#add new functions. ft1 and ft2 both reference us1
~+; 2; ft1; us1; ; ft2; us1; ; ; q 
~#
~#SET LINE-HAUL TIMES (us1)
~#
2.41
~+; 1; y; us1; 0; ; all; all; 4
~#THIS IS WHERE BRT IS DIFFERENTIATED FROM REGULAR TRANSIT
~+;1;y;us1;(@ltime*(ttf.eq.2))+((@ltime.max.@hwytm)*(ttf.eq.1)); ; all; all; 4; q
~#
~#SET WAIT TIMES (us3) (revised 01/2016)
2.41
~+; 1; y; us3; 0; ; all; all; 4
~+; 1; y; us3; hdwy; ; all; all; 4;q
~#
~#SET BASE FARES BY MODE (ut1) 
~# ## 10/2020: for separate CTA Rail fare ##
2.41
~+; 1; y; ut1;  0;  ;       all ;    4
~+; 1; y; ut1; %r1%;  ; mod=BE  ;  ; 4
~+; 1; y; ut1; %r100%;  ; mod=C  ;  ; 4
~+; 1; y; ut1; %r2%;  ; mod=LP  ;  ; 4
~+; 1; y; ut1; %r101%;  ; mod=Q  ;  ; 4
~+; 1; y; ut1; %r3%;  ; mod=M    ;  ; 4; q
~#
~#SET LINK BASED TRANSFER DISCOUNTS (ul1)
~# ## 10/2020: add mode r (CTA Rail-CTA Rail transfer) ##
2.41
~+; 1; y; ul1;  %r4%;  ; mod=bcr ;  ;  4 ; q
~#
~#
~#==============================================================
~/	2. SKIM WALK ACCESS GENERALIZED COST, TIME AND DISTANCE
~#==============================================================
5.11
2
~#new assignment 
~?f&2048
2
~+; mf%r19%06; mf%r19%07; n; mf%r19%08; n; mf%r19%09; n; mf%r19%10; n; mf%r19%11; n; mf%r19%12; n;   
~#
~#assigned modes, skim modes
~+; BCEPQLMuvwxyzbcmrtdk; y; BCEPQLMbcmrtdk 
~#
~#line headways
~+; 4; us3                           
~#
~#line specific boarding penalty 
~+; 3; ut1    
~#
~#wait time factor 
~#
~+; 1; 0.5
~# 
~#wait, auxiliary, boarding weight
~+; %r5%; %r6%; %r7%
~#
~#additional options assignment to skim transit distance
 y
~#
~+; ;len; ; ; 1; +; ; ; mf%r19%13; n; ; ;
~#
5.31
2
~#==============================================================
~/	3. SKIM ADDITIONAL FARE COMPONENTS 
~#==============================================================
~/	3A. SKIM ZONE FARES  
~#==============================================================
5.11
2
~#new assignment 
~?f&2048
2
~+; mf%r19%06; ; ; ; ; ; ;    
~#
~#assigned modes
~+; BCEPQLMuvwxyzbcmrtdk 
~#
~#line headways
~+; 4; us3                           
~#
~#line specific boarding penalty 
~+; 3; ut1    
~#
~#wait time factor 
~#
~+; 1; 0.5
~# 
~#wait, auxiliary, boarding weight
~+; %r5%; %r6%; %r7%
~#
~#additional options assignment to accumulate incremental fares
 y
~#
~+; ;@zfare; ; ; 1; +; ; ; mf%r19%15;n; ; 
~#
~# RUN ASSIGNMENT
~#
5.31
2
~#==============================================================
~/	3B. SKIM LINK-BASED TRANSFER DISCOUNTS 
~#==============================================================
5.11
2
~#new assignment 
~?f&2048
2
~+; mf%r19%06; ; ; ; ; ; ;   
~#
~#assigned modes, skim modes
~#     ~+; BCEPQLMuvwxyzbcmrtd 
~+; BCEPQLMuvwxyzcmrtdk 
~#
~#line headways
~+; 4; us3                           
~#
~#line specific boarding penalty 
~+; 3; ut1    
~#
~#wait time factor 
~#
~+; 1; 0.5
~# 
~#wait, auxiliary, boarding weight
~+; %r5%; %r6%; %r7%
~#
~#additional options assignment to flag walk transfers
 y
~#
~+; ; ; ;ul1 ; 1; .min.; ; ; mf%r19%16; n; ; ;
~#
~# RUN ASSIGNMENT
~#
5.31
2
~#==============================================================
~/	3C. SKIM NODE-BASED TRANSFER DISCOUNTS 
~#==============================================================
5.11
2
~#new assignment 
~?f&2048
2
~+; mf%r19%06; ; ; ; ; ; ; mf%r19%17; n    
~#
~#assigned modes, skim modes
~+; BCEPQLMuvwxyzbcmrtdk; y; BEPQL 
~#
~#line headways (per cmh method 10/01)
~+; 4; us3                           
~#
~#line specific boarding penalty 
~+; 3; ut1    
~#
~#wait time factor 
~#
~+; 1; 0.5
~# 
~#wait, auxiliary, boarding weight
~+; %r5%; %r6%; %r7%
~#
n
~# RUN ASSIGNMENT
~#
5.31
2
~#==============================================================
~/	5. CALCULATE FINAL AVERAGE FARES 
~#==============================================================
3.21
~+;1 ; y;mf%r19%18 ;n
~## -- Base Fares plus Zone Fares (constrained by transit disconnect) --
mf%r19%12 + mf%r19%15 * (mf%r19%17.lt.1000)
~## -- minus transfer discounts*transfers (constrained by transit disconnect & discount not exceeding base fare) -- 
+(mf%r19%17.gt.1) * (mf%r19%17.lt.1000) * mf%r19%17 * mf%r19%16 * (mf%r19%12 .gt. (-1*mf%r19%16))
~## -- add one transfer discount back in so first boarding isn't discounted (but only if the transfer discount is applied) --
-(mf%r19%17.gt.1) * (mf%r19%17.lt.1000) * mf%r19%16 * (mf%r19%12 .gt. (-1*mf%r19%16))
~#
~+; ; ;n;1;q
~#==============================================================
~/SECTION 2. GUESS WHICH MODE
~#==============================================================
~# ORIGINALLY: CATS, GUESS.WHICH.MODE
~# original by kww 3/98, 
~#
~#1. assign transit modes to zone groups by auxiliary mode
~#2. assign first, priority and last mode by zonal interchange grouping
~#
~#zone group key:  first position=mode, second position=access/egress
~# mode values: metra=7, cta rail=6, bus=3 
~# gb70=metra access, gb60=cta rail access, gb30=bus access, gb0=other access
~# gc71=metra egress, gb61=cta rail egress, gb31=bus egress, gc0=other access
~#
~#
~#0./initialize zone groups
3.01
~+|4|gb|y|gc|y||q
~#
~#1./ assign transit modes to zone groups by auxiliary mode
~#initialize ul1 and ui1
2.41 
~+|1|y|ul1|0||all|4
~+|1|y|ui1|0||all|4
~#calculate ul1 based on auxiliary mode
~+|1|y|ul1|30||mod=u||4
~+|1|y|ul1|31||mod=x||4
~+|1|y|ul1|60||mod=v||4
~+|1|y|ul1|61||mod=y||4
~+|1|y|ul1|70||mod=w||4
~+|1|y|ul1|71||mod=z||4
~#
~#calculate ui1 based on ul1 (the inode is the centroid)
~+|1|y|ui1|ul1||2|mod=uvw||4|6
~#
~#assign ui1 to access zone groups (the centroid is the zone number)
3.21
~+|2|gb|y|transit access modes|ui1|||n|1|q
~#
~#calculate uj1 based on ul1 (the jnode is the centroid)
2.41
~+|1|y|ui1|0||all|4
~+|1|y|uj1|ul1||2|mod=xyz||4|6
~#
~#assign uj1 to egress zone groups (the centroid is the zone number)
3.21
~+|2|gc|y|transit egress modes|ui1|||n|1|q
~#************************* change specific mode matrices based on zone group

3.21 /out/  /v//constrain  /sub?/origins/destinations /       first mode
~+|1|y|mf%r19%03|n|6||mf%r19%08|0,0,ex|y|gb60||gc0,gc71||1|
~+|1|y|mf%r19%03|n|7||mf%r19%08|0,0,ex|y|gb70||gc0,gc71||1|q
~#************************/priority mode
3.21 /out/  /v//constrain  /sub?/origins/destinations  /       priority mode
~+|1|y|mf%r19%04|n|6||mf%r19%08|0,0,ex|y|gb30,gb60||gc61||1|
~+|1|y|mf%r19%04|n|6||mf%r19%08|0,0,ex|y|gb60||gc31,gc61||1|
~+|1|y|mf%r19%04|n|7||mf%r19%08|0,0,ex|y|gb30,gb70||gc71||1|
~+|1|y|mf%r19%04|n|7||mf%r19%08|0,0,ex|y|gb70||gc31,gc71||1|q 
~#************************/first mode
3.21 /out/  /v//constrain  /sub?/origins/destinations  /       last mode
~+|1|y|mf%r19%05|n|6||mf%r19%08|0,0,ex|y|gb0,gb70||gc61||1|  
~+|1|y|mf%r19%05|n|7||mf%r19%08|0,0,ex|y|gb0,gb70||gc71||1|q
~#==============================================================================
~/SECTION 3. INDEX AUTO ACCESS AND PARKING
~#==============================================================================
~# ORIGINALLY CATS EMME/2 MACRO index.autoaccess.parking, kww 10/01
~#     originally written to replace MVS MSTPATH, kww 2/98
~#
~#MATRIX CONVOLUTION
~#  TO PRODUCE INPUTS TO CATS COST AND MODE CHOICE
~#	1. CALCULATE PARKING GENERALIZED COSTS
~#	2. CONVOLUTE (INDEX) AUTO, TRANSIT, MODE WITH PARKING COST MATRICES
~#	3. EXTRACT TRANSIT AND AUTO LEGS
~#
~#*****************************************************************
3.21
~+;1;y;mf%r19%19;n 
~+;(%r8%*%t3%) + (%r9%*%t4%) + %r10%; ; ;n;1; ;q
~#
~#*****************************************************************
~# CALCULATE PARK & RIDE GENERALIZED COSTS
~# 
~# CALCULATE PARK & RIDE GENERALIZED COSTS
~# 
~#PREPARE INPUT VARIABLES
~# OFF-STREET AVAILABILITY
~#  move node parking spaces attribute back to zone value on origin matrix
2.41
~+;1;y;ul3;0;;all;4
~+;1;y;ui1;0;;all;4
~+;1;y;ul3;@pspacj;; mod=uvw;;2;2
~+;1;y;ui1;ul3;;4;i=1,%z%;;2;2
~## # -- For the convolution this needs to flag all rail stations - not just those with parking [05-06-2022]
~+;1;y;ui1;ui1 + (i.ge.30000 .and. i.le.49999);;4;i=1,%z%;;2;2;q
~#
3.21
~+;1;y;mo%r19%01;n;ui1; ; ;n;2
~## -- Create Parking Lot Zone Group 10-09-2018 -- ##
~+;1;y;mo602;y;flagpr;flag Park and Ride zones;~?q=1;y;0;mo%r19%01.gt.0; ; ;n;2;q
~## -- initialize partition gr -- ##
~+;3.01;4;gr;y; ;q
3.21
~## -- calculate partition gr --
~+;2;gr;y;Park and Ride Zones;mo602; ; ;n;2;q
~#
~# OFF-STREET FEE
~#  move node parking fee attribute back to zone value on origin matrix
~#   weighted cost calculated by: cost*cap/cap
2.41
~+;1;y;ul3;0;;all;4
~+;1;y;ui2;0;;all;4
~+;1;y;ul3;@pcostj*@pspacj;; mod=uvw;;4
~+;1;y;ui2;ul3/ui1;;4;ui1=1,100000;;4;6
3.21
~+;1;y;mo%r19%02;n;ui2; ; ;n;1;q
~#
~# ON-STREET AVAILABILITY removed kww 6/05
~#
~#CALCULATE PARKING GENERALIZED COST
3.21
~+;1;y;mo%r19%05;n
~+;%r15%/(((%r11%*mo%r19%01)/(%r12%*mo%r19%02.max.%r16%))+(0));
~+;mo%r19%01;0,0,ex;n;1;q 
~#
~#
~#******************************************************************
~/INDEX AUTO ACCESS GENERALIZED COSTS
3.23
1
mf%r19%19          ~/auto leg
+
mf%r19%07           ~/transit leg 
n
+
n
mo%r19%05           ~/parking generalized cost
 
.min.
mf%r19%20          ~/combined auto and transit time
n
mf%r19%21          ~/station zone used
n 
y
1,%z%        ~/submatrices
  
gr1
  
1,%z%
  
                  
y
1
q
~#
~## #-- Adjust kzone matrix - Keep the original zone if: the trip is intrazonal or if there is skimmed transit service available (mf8) and service
~#  ##   originates within the City of Chicago.
~#  ## Otherwise, apply the indexed station zone.
~#  ##   (mf8 is unindexed transit in-vehicle time)  [07-16-2022]
~#  ##
3.21
~+;1;y;mf%r19%21;n
((mf%r19%08.lt.1000 .and. ga(p).eq.1).or.(p.eq.q))*p +
((mf%r19%08.ge.1000 .or. ga(p).ne.1).and.(p.ne.q))*mf%r19%21
~+; ; ;y;1,%z%; ;1,%z%; ;2;q
~#
~# _____________________________________________________
~# always use python. 
~# python indexing will happen next 
~# _____________________________________________________
~# Create storage matrices - use matrix calculator to write over matrices
3.21
~+;1;y; mf%r19%22;y; min; indexed in-vehicle minute %r17% I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%23;y; min; indexed walk transfer minute %r17% I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%24;y; min; indexed total wait minute %r17% I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%25;y; min; indexed first wait minute %r17% I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%28;y; $; indexed final average fare %r17% I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%29;y; $; indexed first mode %r17% I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%30;y; $; indexed priority mode %r17% I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%31;y; $; indexed last mode %r17%I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%32;y; min$; indexed auto generalized cost %r17% I%2%;~?q=1;y;0;0;;;n;2
~+;1;y; mf%r19%33;y; min; indexed auto minutes to transit %r17% I%2%;~?q=1;y;0;0;;;n;2; q
~#
~#increment the scenario number r17 up by 5 to do offpeak
~r17+5
~?y<2
~$period_loop
~o=6
~$>end
~#
~#
~:error
~/ +++++++++++++++++++++++++++++++++++++++
~/   SUBMIT WITH TRANSIT SCENARIO!!!!!!!
~/ +++++++++++++++++++++++++++++++++++++++
~$>skip
~#
~:bad_scen
~/
~/ ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
~/   3-DIGIT SCENARIO DOES NOT MATCH EMMEBANK DATA!!!!!!!
~/ ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
~$>skip
~#
~:end
reports=
~/
~/PYTHON PROCESSING TAKES A FEW MINUTES
~!%3% macros\transit_skim_final_matrices1.py
~!%3% macros\transit_skim_final_matrices2.py
~<macros\finish.transit.skims %1% %2%
~:skip

